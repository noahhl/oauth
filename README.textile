<h1>oauth: a simple oauth client for R</h1>

This is a simple implementation of an Oauth 1.0 and Oauth 2.0 client for the <a href="http://www.r-project.org">R</a> statistical programming language. External dependencies are limited to RCurl and digest. Syntax is intended to be straightforward. 

Use at your own risk. <b>Please</b> report errors, feature requests, etc. using Github issues.

<h2>Installation:</h2>

<pre>
  git clone git@github.com:noahhl/oauth.git
  R CMD INSTALL oauth
</pre>

<h2>Usage:</h2>
1) Create a list with the parameters for your application, structured as below:

For Oauth 1.0:
<pre>
params <- list(oauth_consumer_key = "yourconsumerkey", 
            oauth_consumer_secret = "yourconsumersecret", 
            oauth_callback="http://somedomain.com",
            oauth_signature_method = "HMAC-SHA1",
            oauth_version="1.0", 
            server = list(
                          #To get request token
                          initiate = "https://api.twitter.com/oauth/request_token",
                          #For user authentication
                          auth = "https://api.twitter.com/oauth/authorize",
                          #For access token
                          token = "https://api.twitter.com/oauth/access_token")
)
</pre>


For Oauth 2.0:
<pre>
  params <- list(
    client_id = "6b46fbe891254613e95basdfsadfasdc220e68",
    client_secret = "c28da69a504eeeaasdfsafdas48fc605b3cac5",
    type = "web_server",
    redirect_uri = "http://37signals.com/",
    #For user to authorize app
    request_uri = "https://launchpad.37signals.com/authorization/new",
    #To get token
    token_uri = "https://launchpad.37signals.com/authorization/token"
    )
</pre>


2) Run the <code>Authorize()</code> command, passing it your parameters, optionally with parameters to enable "noisy" output or to specify not to save credentials beyond this session. Recapture the output back into <code>params</code>. If <code>save=T</code> and <code>file=NULL</code>, the credentials will be saved in the local directory in a file name like <code>.oauthparams_api.twitter.Rdata</code>.

For Oauth 2 implementations, prepend <code>Authorize</code> with <code>Oauth2</code>. You can use the refresh token by adding the "refresh=F" option.

Oauth 1:
<pre>
params <- Authorize(params, noisy=F, save=T, file=NULL)
</pre> 

Oauth 2:
<pre>
params <- Oauth2Authorize(params, noisy=F, save=T, file=NULL, refresh=FALSE)
</pre> 


3) If you've previously auth'd, you can reload the credentials using the <code>LoadCredentials(site)</code> or <code>LoadCredentials(file)</code> command, passing it either a path to a previously saved credential file, or the name of the service you are trying to auth for (e.g., <code>api.twitter</code>).

<pre>
  LoadCredentials(site="api.twitter")
  LoadCredentials(file="~/mytwittercredentials")
</pre>

4) Make a request, using the <code>MakeRequest(params, resource, method, request=NULL, noisy=F)</code> command. For Oauth 2 implementations, prepend <code>MakeRequest</code> with <code>Oauth2</code> (e.g., <code>Oauth2MakeRequest</code>); parameters are the same for Oauth1 and Oauth2.

Some examples for <a href = "http://developer.twitter.com/doc/">Twitter</a> are provided below. Briefly:
<ul>
  <li><code>params</code> are the resultant params from an <code>Authorize()</code> command, or the <code>params</code> loaded from <code>LoadCredentials</code></li>
  <li><code>resource</code> is the URL of the resource you are trying to access. If this is a request in which you would pass request parameters (e.g., <code>?search=abcdefg</code>), do not include those parameters in the resource URL.</li>
  <li><code>method</code> is one of "GET", "POST", "PUT", or "DELETE".</li>
  <li><code>request</code> are any request parameters provided as a named character vector (e.g., <code>c(search="Test", since="yesterday")</code>)</li>
</ul>

<pre>
#Verify credentials
MakeRequest(params, "http://api.twitter.com/1/account/verify_credentials.json", "GET")

#Send a tweet
MakeRequest(params, "http://api.twitter.com/1/statuses/update.json", "POST", request=c(status="#rstats is my hero."))

</pre>

A demo can be accessed by loading the <code>oauth</code> package and running <code>demo("term-ie_demo")</code>.

<h2>Acknowledgements / license</h2>
Github user twittoru provided the included HMAC-SHA1 implementation, found at: <a href="https://gist.github.com/586468">https://gist.github.com/586468</a>

This package is made available under the MIT license:

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

